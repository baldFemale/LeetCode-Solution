from collections import Counter

class DSU:
    def __init__(self, n):
        self.parents = range(n)
        self.rank = [0] * n

    def find(self, x):
        if self.parents[x] != x:
            self.parents[x] = self.find(self.parents[x])
        return self.parents[x]

    def union(self, x, y):
        xr, yr = self.find(x), self.find(y)
        if xr == yr:
            return
        if self.rank[xr] > self.rank[yr]:
            self.parents[yr] = xr
        elif self.rank[yr] > self.rank[xr]:
            self.parents[xr] = yr
        else:
            self.parents[yr] = xr
            self.rank[xr] += 1
        return


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        dsu = DSU(400)

        for i in range(len(graph)):
            for j in range(len(graph[i])):
                if graph[i][j] == 1:
                    dsu.union(i, j)

        c = Counter([dsu.find(i) for i in initial])
        cc = Counter([dsu.find(i) for i in range(len(graph))])

        initial.sort()
        res = (initial[0], 0)
        for j in initial:
            root = dsu.find(j)
            if c[root] == 1:
                if cc[root] > res[1]:
                    res = (j, cc[root])
        return res[0]

